[{"/home/alexis/constantLearning/redTetris/src/client/src/index.js":"1","/home/alexis/constantLearning/redTetris/src/client/src/App.js":"2","/home/alexis/constantLearning/redTetris/src/client/src/reportWebVitals.js":"3","/home/alexis/constantLearning/redTetris/src/client/src/componant/context/defaultStateContextGame.js":"4","/home/alexis/constantLearning/redTetris/src/client/src/componant/context/contextGame.jsx":"5","/home/alexis/constantLearning/redTetris/src/client/src/componant/pages/HomeGame.jsx":"6","/home/alexis/constantLearning/redTetris/src/client/src/componant/pages/RedTetrisBoard.jsx":"7","/home/alexis/constantLearning/redTetris/src/client/src/componant/context/Store.jsx":"8","/home/alexis/constantLearning/redTetris/src/client/src/componant/pages/CreateGame.jsx":"9","/home/alexis/constantLearning/redTetris/src/client/src/componant/pages/RedTetrisRow.jsx":"10","/home/alexis/constantLearning/redTetris/src/client/src/componant/hook/checkLineComplete.js":"11","/home/alexis/constantLearning/redTetris/src/client/src/componant/hook/useActionUser.jsx":"12","/home/alexis/constantLearning/redTetris/src/client/src/componant/hook/useGameLoop.jsx":"13","/home/alexis/constantLearning/redTetris/src/client/src/componant/pages/RedTetrisCase.jsx":"14","/home/alexis/constantLearning/redTetris/src/client/src/componant/hook/useKeyPress.jsx":"15","/home/alexis/constantLearning/redTetris/src/client/src/componant/hook/useInterval.jsx":"16"},{"size":478,"mtime":1609872411958,"results":"17","hashOfConfig":"18"},{"size":467,"mtime":1609872353614,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1609500115470,"results":"20","hashOfConfig":"18"},{"size":61,"mtime":1609601069103,"results":"21","hashOfConfig":"18"},{"size":145,"mtime":1609601470559,"results":"22","hashOfConfig":"18"},{"size":341,"mtime":1609605726934,"results":"23","hashOfConfig":"18"},{"size":1340,"mtime":1609704288920,"results":"24","hashOfConfig":"18"},{"size":2108,"mtime":1609710494950,"results":"25","hashOfConfig":"18"},{"size":468,"mtime":1609704288920,"results":"26","hashOfConfig":"18"},{"size":476,"mtime":1609617014276,"results":"27","hashOfConfig":"18"},{"size":1185,"mtime":1609630975783,"results":"28","hashOfConfig":"18"},{"size":1118,"mtime":1609704388329,"results":"29","hashOfConfig":"18"},{"size":5426,"mtime":1609751498816,"results":"30","hashOfConfig":"18"},{"size":724,"mtime":1609617076489,"results":"31","hashOfConfig":"18"},{"size":707,"mtime":1609704288920,"results":"32","hashOfConfig":"18"},{"size":509,"mtime":1609612621103,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1d6ez7n",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"36"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"36"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"36"},"/home/alexis/constantLearning/redTetris/src/client/src/index.js",[],["77","78"],"/home/alexis/constantLearning/redTetris/src/client/src/App.js",[],"/home/alexis/constantLearning/redTetris/src/client/src/reportWebVitals.js",[],"/home/alexis/constantLearning/redTetris/src/client/src/componant/context/defaultStateContextGame.js",["79"],"export default  {\n    currentKey : '',\n    username : 'd0m'\n}",["80","81"],"/home/alexis/constantLearning/redTetris/src/client/src/componant/context/contextGame.jsx",[],"/home/alexis/constantLearning/redTetris/src/client/src/componant/pages/HomeGame.jsx",["82"],"import React , {useContext} from 'react'\nimport RedTetrisBoard from './RedTetrisBoard';\nimport {Context} from './../context/Store';\n\n\nfunction HomeGame() {\n    const [state, dispatch] = useContext(Context);\n\n    return (\n        <div>\n            <RedTetrisBoard currentBoard={state.tmpMap}/>\n        </div>\n    )\n}\n\nexport default HomeGame\n","/home/alexis/constantLearning/redTetris/src/client/src/componant/pages/RedTetrisBoard.jsx",["83","84","85","86"],"import React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport RedTetrisRow from \"./RedTetrisRow\";\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport CreateGame from './CreateGame';\n\nimport useActionUser from './../hook/useActionUser';\n\nimport useGameLoop from './../hook/useGameLoop';\n\nconst useStyles = makeStyles({\n    root: {\n        backgroundColor : '#333',\n        border : '1px',\n        borderColor : '#666',\n        width : '100%',\n    }\n})\n\n\nconst RedTetrisBoard = ({currentBoard}) => {\n  let [keyPress] = useActionUser();\n  useGameLoop();\n  let [dimBoard, setDimBoard] = useState({ w: 10, h: 20 });\n  let [board, setBoard] = useState(\n    Array(dimBoard.h)\n      .fill()\n      .map(() => Array(dimBoard.w).fill(0))\n  );\n\n  useEffect(() => {\n    console.log(dimBoard);\n    console.log(board);\n  }, []);\n  return (\n    <div >\n      <Typography>RED TETRIS</Typography>\n      <CreateGame/>\n    \n      <div style={{width: '50%', height : '50%'}}>\n      {currentBoard.map((row, indexRow) => (\n        <Grid container direction=\"row\" key={\"rowrow\" + indexRow} className={useStyles.root}>\n          <RedTetrisRow row={row}></RedTetrisRow>\n        </Grid>\n      ))}\n      </div>\n    </div>\n  );\n};\n\nexport default RedTetrisBoard;\n","/home/alexis/constantLearning/redTetris/src/client/src/componant/context/Store.jsx",["87","88"],"import React, { createContext, useReducer } from \"react\";\nimport _ from \"lodash\" // Import the entire lodash library\nconst { findLineComplete, deleteAndMooveBottomLine} = require('../hook/checkLineComplete');\n\nconst UPDATE_KEY = \"UPDATE_KEY\";\nconst UPDATE_MAP_ADD_TETRIMINOS = \"UPDATE_MAP_ADD_TETRIMINOS\";\nconst UPDATE_TMP_MAP = \"UPDATE_TMP_MAP\";\nconst UPDATE_TETRIMINOS_POS = \"UPDATE_TETRIMINOS_POS\";\n\nconst PLACE_TETRIMINOS = \"PLACE_TETRIMINOS\";\nconst GET_NEXT_TETRIMINOS = \"GET_NEXT_TETRIMINOS\";\n\nconst CHECK_LINE_COMPLETE = 'CHECK_LINE_COMPLETE';\n\nconst Reducer = (state, action) => {\n\n  switch (action.type) {\n    case UPDATE_KEY:\n      return {\n        ...state,\n        currentKey: action.payload,\n      };\n    case UPDATE_TMP_MAP:\n      return {\n        ...state,\n        tmpMap: action.payload,\n      };\n    case UPDATE_TETRIMINOS_POS:\n      return {\n        ...state,\n\n        currPosTetriminos: { x: action.payload.x, y: action.payload.y },\n      };\n\n    //         copy tmpMap in FinalMap\n    case PLACE_TETRIMINOS:\n      let cpTmpMap = _.cloneDeep(state.tmpMap);\n      return {\n          ...state,\n          currMap: cpTmpMap,\n      };\n    case GET_NEXT_TETRIMINOS:\n        // ask next tetriminos\n      return {\n          ...state,\n          currPosTetriminos: { x: 5, y: 0 },\n      };\n\n      case CHECK_LINE_COMPLETE:\n        let newArr = _.cloneDeep(deleteAndMooveBottomLine(state.currMap));\n\n        return{\n          currMap: newArr,\n          ...state\n        }\n    default:\n      return state;\n  }\n};\n\nconst initialState = {\n  currentKey: \"\",\n  username: \"d0m\",\n  currTetriminos: {\n    tetri: [[1,1,1], [1,1,1], [1,1,1]],\n    color: 'red'\n  },\n  currPosTetriminos: { x: 5, y: 0 },\n  currMap: Array(20)\n    .fill()\n    .map(() => Array(10).fill(0)),\n  tmpMap: Array(20)\n    .fill()\n    .map(() => Array(10).fill(0)),\n};\n\nconst Store = ({ children }) => {\n  const [state, dispatch] = useReducer(Reducer, initialState);\n  return (\n    <Context.Provider value={[state, dispatch]}>{children}</Context.Provider>\n  );\n};\n\nexport const Context = createContext(initialState);\nexport default Store;\n","/home/alexis/constantLearning/redTetris/src/client/src/componant/pages/CreateGame.jsx",[],"/home/alexis/constantLearning/redTetris/src/client/src/componant/pages/RedTetrisRow.jsx",[],"/home/alexis/constantLearning/redTetris/src/client/src/componant/hook/checkLineComplete.js",["89"],"const { map } = require(\"lodash\")\n\nlet findLineComplete = (tabMap)=> {\n    return tabMap.map((arr, index) => {\n        return (arr.every(elem => elem > 0)) ? index : '';\n    }).filter(elem => elem !== '');\n}\n\n\n\n/*\ncommencer dans e topdes lignes\n[\n\n    0: [1, 0, 0, 0],\n    1: [1, 1, 1, 1],\n    2: [1, 1, 1, 0],\n    3: [1, 1, 1, 1],\n\n]\n[\n    0: [] // +2\n    1: [] // +1\n    2: [] // +1\n    3: [] //  0\n\n    0: [] // +2\n    1: [] // +1\n    2: [] // +1\n    3: [] //  0\n\n    0 -> 0 + 2\n    1 -> 1 + 1\n]\n\n--->\n[\n    [1,0,0,0], // -2\n    [1,1,1,1], //-1\n    [1,1,1,0], //-1\n    [1, 1, 1, 1], // 0\n]\n*/\n\n/*\n    [1, 3]\n                     + 1 + 1 + 1\n    [0, 1, 2, 3] => [X, 0, 1, 2]\n\n    turn 3 : \n    delete one line\n    [1,0,0,0], // +1\n    [1,1,1,1], //+1\n    [1,1,1,0], //+1\n    [1, 1, 1, 1], // 0\n*/\n\nlet deleteAndMooveBottomLine = (tabMap) => {\n    let arr = findLineComplete(tabMap);\n\n    for (let i = arr.length - 1; i >= 0; i--) {\n        tabMap.splice(arr[i], 1);\n    }\n\n    for (let i = arr.length - 1; i >= 0; i--) {\n        tabMap.unshift(Array(tabMap[i].length).fill(0));\n    }    \n\n    return (tabMap);\n}\n\nmodule.exports= {\n    findLineComplete,\n    deleteAndMooveBottomLine\n}","/home/alexis/constantLearning/redTetris/src/client/src/componant/hook/useActionUser.jsx",["90","91","92"],"import React,{useEffect, useContext} from 'react'\nimport useKeyPress from './useKeyPress';\n\nimport {Context} from './../context/Store';\nconst useActionUser = () => {\n    const [state, dispatch] = useContext(Context);\n    const [keyPress] = useKeyPress();\n    \n    useEffect(() => {\n        \n    switch(keyPress){\n            case 'ArrowRight':\n                dispatch({type : 'UPDATE_KEY', payload : 'right'});\n            break;\n            case 'ArrowLeft':\n                dispatch({type : 'UPDATE_KEY', payload : 'left'});\n            break;\n            case 'ArrowUp':\n                dispatch({type : 'UPDATE_KEY', payload : 'up'});\n            break;\n            case 'ArrowDown':\n                dispatch({type : 'UPDATE_KEY', payload : 'down'});\n            break;\n            case 'Space':\n                dispatch({type : 'UPDATE_KEY', payload : 'space'});\n            break;\n            case '':\n                dispatch({type : 'UPDATE_KEY', payload : ''});\n            break;\n            default:\n\n            break;\n        }\n    }, [keyPress])\n\n    return ([keyPress])\n}\n\nexport default useActionUser\n","/home/alexis/constantLearning/redTetris/src/client/src/componant/hook/useGameLoop.jsx",["93"],"import {useContext} from 'react'\nimport {Context} from './../context/Store';\nimport _ from \"lodash\" // Import the entire lodash library\nimport useInterval from './useInterval';\n\nconst useGameLoop = () => {\n    const [state, dispatch] = useContext(Context);\n\n    // go perform context game action\n    /*\n    test placement tetriminos\n    test dessente simple case avec condition d arret et validation\n    test avec un vrai tetriminos\n    test transmission depuis le server\n    */\n    /*\n        test 1 algo :\n        * recuperer la map final : ok\n        * ajout de la tetriminos : ok\n        * update la tmpMap : ok\n        *Si piece pose : ok\n            * mettre a jours la map principal : ok\n            * garder l information : ok\n    */\n\n    /*\n        test 2 algo :\n            * check complete line\n            * add moore complex tetriminos\n    */\n\n    /*\nTetris algo :\n\n// tetriminos actuel\n// tmpMap : map utilise pour l affichage temporaire des tetriminos et son deplacement\n// finalMap : map contenant uniquement les tetriminis deja place\n1) tmpMap = finalMap, tetriminos = getCurrentTetriminos\n2) IF (tetriminos.position touche le bord de la map (y - 1)) || (un element se trouve deja a la case suivante)\n    THEN\n        copy tmpMap in FinalMap \n        getNextTetriminos()\n        IF (oneOreMore ligne completee)\n        {\n            supprimerles lignes concernee\n        }\n   SINON\n    deplacer le tetriminos\n    mise a jour  de tmpTab \n    */\n\n    //current pos tetriminos\n    //current map\n    //current key\n    const nextPos = (currPos, cpMap, currentKey) => {\n        let tmpPos = {x : currPos.x, y : currPos.y};\n        switch (currentKey){\n            case 'left':\n                if (tmpPos.x > 0)\n                    tmpPos.x -= 1;\n                else \n                    tmpPos.y += 1;\n            break;\n            case 'right':\n                if (tmpPos.x + 1 < cpMap[0].length)\n                    tmpPos.x += 1;\n                else \n                    tmpPos.y += 1;\n            break;\n            default:\n                tmpPos.y += 1;\n            break;\n        }\n        return (tmpPos)\n    }\n    \n    /*\n    ** game algo :** virer l utilisation massive de redux la garder que pour la gestion\n    ** 1) determiner si la piece a teeind son emplacement final:\n        * calculer sa futur position\n        donc on avance d une case vers le bas\n        * essayer d ajouter le tetriminos a notre plateau\n            * si le tetriminso depasse du plateau vers le bas ou est en contact avec un tetriminos\n                * poser la piece avec son etat n - 1\n            * sinon continuer le jeu\n            * \n        PLUS CHAUD QUE PREVU L ALGO\n        G LE DEFINIR COMME IL FAUT\n    */\n    const updateMapTestAlgo1 = async () => {\n        let cpMap = _.cloneDeep(state.currMap);\n        let posTetri = state.currPosTetriminos;\n    \n        // copy tetriminos\n        console.log('tetriminos : ');\n        console.log(state.currTetriminos);\n\n        // ajout du tetriminos\n        let checkContact =false;\n        let checkOusideOnX = false;// check if your componat go outside onx axe\n        for (let y = 0; y < state.currTetriminos.tetri.length && !checkContact; y++){\n            for (let x = 0; x < state.currTetriminos.tetri[0].length && !checkContact; x++){\n                //console.log('turn : ' + (y + state.currPosTetriminos.y) + ' | ' + (x + state.currPosTetriminos.x));\n                //end map\n                console.log('y : ' + (y + state.currPosTetriminos.y) + ' | x : ' + (x + state.currPosTetriminos.x));\n                if (x + state.currPosTetriminos.x >= cpMap[0].length){\n                    checkOusideOnX = true;\n                }\n                \n                else if (y + state.currPosTetriminos.y >= cpMap.length ||// atteind le bas du plateau\n                    cpMap[y + state.currPosTetriminos.y][x + state.currPosTetriminos.x] > 0) // check if we don t erase form present\n                    checkContact = true;\n                else\n                    cpMap[y + state.currPosTetriminos.y][x + state.currPosTetriminos.x] = 1;\n                \n            }\n        }\n\n        //console.log(cpMap);\n\n        //cpMap[state.currPosTetriminos.y][state.currPosTetriminos.x] = 1;\n\n\n        if (!checkContact)\n        {\n            dispatch({type : 'UPDATE_TMP_MAP', payload : cpMap});\n            // updatetetriminos pos\n            // change position\n        }\n        let newPos = nextPos(state.currPosTetriminos, cpMap, state.currentKey);\n\n        //tetriminos final position - validation and ask a new one\n        if (posTetri.y + 1 === cpMap.length){// || cpMap[posTetri.y + 1][posTetri.x] > 0) {\n            // save current array in finalArray\n            await dispatch({type : 'PLACE_TETRIMINOS'});\n            // next tetriminos\n            await dispatch({type : 'GET_NEXT_TETRIMINOS'});\n            // remove line if full\n            await dispatch({type : 'CHECK_LINE_COMPLETE'});\n        }\n        //update position of our current tetriminos\n        else if (newPos.y < cpMap.length && newPos.x < cpMap[0].length)\n        {   \n                await dispatch({type : 'UPDATE_TETRIMINOS_POS', payload : newPos});\n            // check tetriminos position\n\n            // if succes  runanither tetriminos\n        }\n        else{\n            console.log('fuck');\n        }\n    }\n    useInterval(updateMapTestAlgo1, 100);\n}\n\nexport default useGameLoop\n","/home/alexis/constantLearning/redTetris/src/client/src/componant/pages/RedTetrisCase.jsx",[],"/home/alexis/constantLearning/redTetris/src/client/src/componant/hook/useKeyPress.jsx",["94"],"import React,{useEffect, useState} from 'react'\n\n\nconst useKeyPress = () => {\n    const [keyPress, setKeyPress] = useState('');\n\n    // If pressed key is our target key then set to true\n\n  const downHandler = (event) => {\n      setKeyPress(event.code);\n   }\n\n  const upHandler = () => {\n      console.log('up handler');\n      setKeyPress('');\n  };\n\n    useEffect(() => {\n        window.addEventListener('keydown', downHandler);\n        window.addEventListener('keyup', upHandler);\n    \n        return () => {\n          window.removeEventListener('keydown', downHandler);\n          window.removeEventListener('keyup', upHandler);\n        };\n    }, [])\n\n    return ([keyPress]);\n}\n\nexport default useKeyPress\n","/home/alexis/constantLearning/redTetris/src/client/src/componant/hook/useInterval.jsx",["95","96"],"import React, { useState, useEffect, useRef } from 'react';\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;",{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":1,"column":1,"nodeType":"103","endLine":4,"endColumn":2},{"ruleId":"97","replacedBy":"104"},{"ruleId":"99","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":7,"column":19,"nodeType":"108","messageId":"109","endLine":7,"endColumn":27},{"ruleId":"106","severity":1,"message":"110","line":25,"column":8,"nodeType":"108","messageId":"109","endLine":25,"endColumn":16},{"ruleId":"106","severity":1,"message":"111","line":27,"column":18,"nodeType":"108","messageId":"109","endLine":27,"endColumn":29},{"ruleId":"106","severity":1,"message":"112","line":28,"column":15,"nodeType":"108","messageId":"109","endLine":28,"endColumn":23},{"ruleId":"113","severity":1,"message":"114","line":37,"column":6,"nodeType":"115","endLine":37,"endColumn":8,"suggestions":"116"},{"ruleId":"106","severity":1,"message":"117","line":3,"column":9,"nodeType":"108","messageId":"109","endLine":3,"endColumn":25},{"ruleId":"106","severity":1,"message":"118","line":6,"column":7,"nodeType":"108","messageId":"109","endLine":6,"endColumn":32},{"ruleId":"106","severity":1,"message":"119","line":1,"column":9,"nodeType":"108","messageId":"109","endLine":1,"endColumn":12},{"ruleId":"106","severity":1,"message":"120","line":1,"column":8,"nodeType":"108","messageId":"109","endLine":1,"endColumn":13},{"ruleId":"106","severity":1,"message":"121","line":6,"column":12,"nodeType":"108","messageId":"109","endLine":6,"endColumn":17},{"ruleId":"113","severity":1,"message":"122","line":34,"column":8,"nodeType":"115","endLine":34,"endColumn":18,"suggestions":"123"},{"ruleId":"106","severity":1,"message":"124","line":107,"column":21,"nodeType":"108","messageId":"109","endLine":107,"endColumn":35},{"ruleId":"106","severity":1,"message":"120","line":1,"column":8,"nodeType":"108","messageId":"109","endLine":1,"endColumn":13},{"ruleId":"106","severity":1,"message":"120","line":1,"column":8,"nodeType":"108","messageId":"109","endLine":1,"endColumn":13},{"ruleId":"106","severity":1,"message":"125","line":1,"column":17,"nodeType":"108","messageId":"109","endLine":1,"endColumn":25},"no-native-reassign",["126"],"no-negated-in-lhs",["127"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["126"],["127"],"no-unused-vars","'dispatch' is assigned a value but never used.","Identifier","unusedVar","'keyPress' is assigned a value but never used.","'setDimBoard' is assigned a value but never used.","'setBoard' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'board' and 'dimBoard'. Either include them or remove the dependency array.","ArrayExpression",["128"],"'findLineComplete' is assigned a value but never used.","'UPDATE_MAP_ADD_TETRIMINOS' is assigned a value but never used.","'map' is assigned a value but never used.","'React' is defined but never used.","'state' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["129"],"'checkOusideOnX' is assigned a value but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},"Update the dependencies array to be: [board, dimBoard]",{"range":"134","text":"135"},"Update the dependencies array to be: [dispatch, keyPress]",{"range":"136","text":"137"},[916,918],"[board, dimBoard]",[1049,1059],"[dispatch, keyPress]"]
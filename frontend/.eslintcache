[{"/home/alexis/constantLearning/redTetris/frontend/src/index.js":"1","/home/alexis/constantLearning/redTetris/frontend/src/reportWebVitals.js":"2","/home/alexis/constantLearning/redTetris/frontend/src/App.js":"3","/home/alexis/constantLearning/redTetris/frontend/src/componant/pages/RedTetrisBoard.jsx":"4","/home/alexis/constantLearning/redTetris/frontend/src/componant/pages/RedTetrisRow.jsx":"5","/home/alexis/constantLearning/redTetris/frontend/src/componant/pages/CreateGame.jsx":"6","/home/alexis/constantLearning/redTetris/frontend/src/componant/hook/useActionUser.jsx":"7","/home/alexis/constantLearning/redTetris/frontend/src/componant/hook/useKeyPress.jsx":"8","/home/alexis/constantLearning/redTetris/frontend/src/componant/context/contextGame.jsx":"9","/home/alexis/constantLearning/redTetris/frontend/src/componant/context/defaultStateContextGame.js":"10","/home/alexis/constantLearning/redTetris/frontend/src/componant/context/Store.jsx":"11","/home/alexis/constantLearning/redTetris/frontend/src/componant/hook/useGameLoop.jsx":"12","/home/alexis/constantLearning/redTetris/frontend/src/componant/pages/HomeGame.jsx":"13","/home/alexis/constantLearning/redTetris/frontend/src/componant/hook/useInterval.jsx":"14","/home/alexis/constantLearning/redTetris/frontend/src/componant/pages/RedTetrisCase.jsx":"15"},{"size":500,"mtime":1609500115470,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1609500115470,"results":"18","hashOfConfig":"17"},{"size":739,"mtime":1609608732464,"results":"19","hashOfConfig":"17"},{"size":1340,"mtime":1609604960726,"results":"20","hashOfConfig":"17"},{"size":476,"mtime":1609617014276,"results":"21","hashOfConfig":"17"},{"size":468,"mtime":1609590347195,"results":"22","hashOfConfig":"17"},{"size":1230,"mtime":1609605292414,"results":"23","hashOfConfig":"17"},{"size":707,"mtime":1609603676778,"results":"24","hashOfConfig":"17"},{"size":145,"mtime":1609601470559,"results":"25","hashOfConfig":"17"},{"size":61,"mtime":1609601069103,"results":"26","hashOfConfig":"17"},{"size":1851,"mtime":1609616056124,"results":"27","hashOfConfig":"17"},{"size":3574,"mtime":1609618736900,"results":"28","hashOfConfig":"17"},{"size":341,"mtime":1609605726934,"results":"29","hashOfConfig":"17"},{"size":509,"mtime":1609612621103,"results":"30","hashOfConfig":"17"},{"size":724,"mtime":1609617076489,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"124mcmy",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"34"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/alexis/constantLearning/redTetris/frontend/src/index.js",[],["70","71"],"/home/alexis/constantLearning/redTetris/frontend/src/reportWebVitals.js",[],"/home/alexis/constantLearning/redTetris/frontend/src/App.js",["72","73","74","75","76"],"import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport RedTetrisBoard from \"./componant/pages/RedTetrisBoard\";\n\nimport React from \"react\";\n\nimport GameContext from \"./componant/context/contextGame\";\nimport defaultStateContextGame from \"./componant/context/defaultStateContextGame\";\n\nimport Store, { Context } from \"./componant/context/Store\";\n\nimport HomeGame from \"./componant/pages/HomeGame\";\n/*\nconst GameContext = React.createContext({\n  username : 'miaou',\n  currentKey : '',\n});\n*/\n\n/*\nlet dimBoard = {w : 10, h : 20};\nlet board = Array(dimBoard.h).fill().map(()=> Array(dimBoard.w))\n*/\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Store>\n        <HomeGame />\n      </Store>\n    </div>\n  );\n}\n\nexport default App;\n","/home/alexis/constantLearning/redTetris/frontend/src/componant/pages/RedTetrisBoard.jsx",["77","78","79","80"],"import React, { useState, useEffect } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport RedTetrisRow from \"./RedTetrisRow\";\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport CreateGame from './CreateGame';\n\nimport useActionUser from './../hook/useActionUser';\n\nimport useGameLoop from './../hook/useGameLoop';\n\nconst useStyles = makeStyles({\n    root: {\n        backgroundColor : '#333',\n        border : '1px',\n        borderColor : '#666',\n        width : '100%',\n    }\n})\n\n\nconst RedTetrisBoard = ({currentBoard}) => {\n  let [keyPress] = useActionUser();\n  useGameLoop();\n  let [dimBoard, setDimBoard] = useState({ w: 10, h: 20 });\n  let [board, setBoard] = useState(\n    Array(dimBoard.h)\n      .fill()\n      .map(() => Array(dimBoard.w).fill(0))\n  );\n\n  useEffect(() => {\n    console.log(dimBoard);\n    console.log(board);\n  }, []);\n  return (\n    <div >\n      <Typography>RED TETRIS</Typography>\n      <CreateGame/>\n    \n      <div style={{width: '50%', height : '50%'}}>\n      {currentBoard.map((row, indexRow) => (\n        <Grid container direction=\"row\" key={\"rowrow\" + indexRow} className={useStyles.root}>\n          <RedTetrisRow row={row}></RedTetrisRow>\n        </Grid>\n      ))}\n      </div>\n    </div>\n  );\n};\n\nexport default RedTetrisBoard;\n","/home/alexis/constantLearning/redTetris/frontend/src/componant/pages/RedTetrisRow.jsx",[],"/home/alexis/constantLearning/redTetris/frontend/src/componant/pages/CreateGame.jsx",[],"/home/alexis/constantLearning/redTetris/frontend/src/componant/hook/useActionUser.jsx",["81","82"],"import React,{useEffect, useContext} from 'react'\nimport useKeyPress from './useKeyPress';\n\nimport {Context} from './../context/Store';\nconst useActionUser = () => {\n    const [state, dispatch] = useContext(Context);\n    const [keyPress] = useKeyPress();\n    \n    useEffect(() => {\n        console.log('key press : ' + keyPress);\n    //    console.log(GameContext);\n        console.log(state);\n        \n    switch(keyPress){\n            case 'ArrowRight':\n                dispatch({type : 'UPDATE_KEY', payload : 'right'});\n            break;\n            case 'ArrowLeft':\n                dispatch({type : 'UPDATE_KEY', payload : 'left'});\n            break;\n            case 'ArrowUp':\n                dispatch({type : 'UPDATE_KEY', payload : 'up'});\n            break;\n            case 'ArrowDown':\n                dispatch({type : 'UPDATE_KEY', payload : 'down'});\n            break;\n            case 'Space':\n                dispatch({type : 'UPDATE_KEY', payload : 'space'});\n            break;\n            case '':\n                dispatch({type : 'UPDATE_KEY', payload : ''});\n            break;\n            default:\n\n            break;\n        }\n    }, [keyPress])\n\n    return ([keyPress])\n}\n\nexport default useActionUser\n","/home/alexis/constantLearning/redTetris/frontend/src/componant/hook/useKeyPress.jsx",["83"],"import React,{useEffect, useState} from 'react'\n\n\nconst useKeyPress = () => {\n    const [keyPress, setKeyPress] = useState('');\n\n    // If pressed key is our target key then set to true\n\n  const downHandler = (event) => {\n      setKeyPress(event.code);\n   }\n\n  const upHandler = () => {\n      console.log('up handler');\n      setKeyPress('');\n  };\n\n    useEffect(() => {\n        window.addEventListener('keydown', downHandler);\n        window.addEventListener('keyup', upHandler);\n    \n        return () => {\n          window.removeEventListener('keydown', downHandler);\n          window.removeEventListener('keyup', upHandler);\n        };\n    }, [])\n\n    return ([keyPress]);\n}\n\nexport default useKeyPress\n","/home/alexis/constantLearning/redTetris/frontend/src/componant/context/contextGame.jsx",[],"/home/alexis/constantLearning/redTetris/frontend/src/componant/context/defaultStateContextGame.js",["84"],"export default  {\n    currentKey : '',\n    username : 'd0m'\n}","/home/alexis/constantLearning/redTetris/frontend/src/componant/context/Store.jsx",["85"],"/home/alexis/constantLearning/redTetris/frontend/src/componant/hook/useGameLoop.jsx",[],"/home/alexis/constantLearning/redTetris/frontend/src/componant/pages/HomeGame.jsx",["86"],"import React , {useContext} from 'react'\nimport RedTetrisBoard from './RedTetrisBoard';\nimport {Context} from './../context/Store';\n\n\nfunction HomeGame() {\n    const [state, dispatch] = useContext(Context);\n\n    return (\n        <div>\n            <RedTetrisBoard currentBoard={state.tmpMap}/>\n        </div>\n    )\n}\n\nexport default HomeGame\n","/home/alexis/constantLearning/redTetris/frontend/src/componant/hook/useInterval.jsx",["87","88"],"import React, { useState, useEffect, useRef } from 'react';\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default useInterval;","/home/alexis/constantLearning/redTetris/frontend/src/componant/pages/RedTetrisCase.jsx",[],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":1,"column":8,"nodeType":"95","messageId":"96","endLine":1,"endColumn":12},{"ruleId":"93","severity":1,"message":"97","line":3,"column":8,"nodeType":"95","messageId":"96","endLine":3,"endColumn":22},{"ruleId":"93","severity":1,"message":"98","line":7,"column":8,"nodeType":"95","messageId":"96","endLine":7,"endColumn":19},{"ruleId":"93","severity":1,"message":"99","line":8,"column":8,"nodeType":"95","messageId":"96","endLine":8,"endColumn":31},{"ruleId":"93","severity":1,"message":"100","line":10,"column":17,"nodeType":"95","messageId":"96","endLine":10,"endColumn":24},{"ruleId":"93","severity":1,"message":"101","line":25,"column":8,"nodeType":"95","messageId":"96","endLine":25,"endColumn":16},{"ruleId":"93","severity":1,"message":"102","line":27,"column":18,"nodeType":"95","messageId":"96","endLine":27,"endColumn":29},{"ruleId":"93","severity":1,"message":"103","line":28,"column":15,"nodeType":"95","messageId":"96","endLine":28,"endColumn":23},{"ruleId":"104","severity":1,"message":"105","line":37,"column":6,"nodeType":"106","endLine":37,"endColumn":8,"suggestions":"107"},{"ruleId":"93","severity":1,"message":"108","line":1,"column":8,"nodeType":"95","messageId":"96","endLine":1,"endColumn":13},{"ruleId":"104","severity":1,"message":"109","line":37,"column":8,"nodeType":"106","endLine":37,"endColumn":18,"suggestions":"110"},{"ruleId":"93","severity":1,"message":"108","line":1,"column":8,"nodeType":"95","messageId":"96","endLine":1,"endColumn":13},{"ruleId":"111","severity":1,"message":"112","line":1,"column":1,"nodeType":"113","endLine":4,"endColumn":2},{"ruleId":"93","severity":1,"message":"114","line":5,"column":7,"nodeType":"95","messageId":"96","endLine":5,"endColumn":32},{"ruleId":"93","severity":1,"message":"115","line":7,"column":19,"nodeType":"95","messageId":"96","endLine":7,"endColumn":27},{"ruleId":"93","severity":1,"message":"108","line":1,"column":8,"nodeType":"95","messageId":"96","endLine":1,"endColumn":13},{"ruleId":"93","severity":1,"message":"116","line":1,"column":17,"nodeType":"95","messageId":"96","endLine":1,"endColumn":25},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'RedTetrisBoard' is defined but never used.","'GameContext' is defined but never used.","'defaultStateContextGame' is defined but never used.","'Context' is defined but never used.","'keyPress' is assigned a value but never used.","'setDimBoard' is assigned a value but never used.","'setBoard' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'board' and 'dimBoard'. Either include them or remove the dependency array.","ArrayExpression",["119"],"'React' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'state'. Either include them or remove the dependency array.",["120"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'UPDATE_MAP_ADD_TETRIMINOS' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},"Update the dependencies array to be: [board, dimBoard]",{"range":"125","text":"126"},"Update the dependencies array to be: [dispatch, keyPress, state]",{"range":"127","text":"128"},[916,918],"[board, dimBoard]",[1161,1171],"[dispatch, keyPress, state]"]